openapi: 3.0.3
info:
  title: Yelp-like application - OpenAPI 3.0
  description: |-
    This is a sample Yelp-like application server based on the OpenAPI 3.0 specification.
  contact:
    email: changju@oregonstate.edu
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: http://localhost:8000
tags:
  - name: businesses
  - name: reviews
  - name: photos
  - name: user
paths:
  /businesses:
    post:
      tags:
        - businesses
      summary: Add a new business
      description: Add a new business
      operationId: addBusiness
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Business'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 19
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Errors'
    get:
      tags:
        - businesses
      summary: Find all businesses 
      description: Find all businesses by page
      operationId: getBusinessesByPage
      parameters:
        - name: Page
          in: query
          description: Page of businesses to return
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  businesses:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int64
                              example: 1
                        - $ref: '#/components/schemas/Business'
                  page:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 1
                  numPerPage:
                    type: integer
                    example: 10
                  totalCount:
                    type: integer
                    example: 1
      
  /businesses/{businessId}:
    get:
      tags:
        - businesses
      summary: Find business by  ID
      description: Returns a single business with reviews and photos
      operationId: getBusinessById
      parameters:
        - name: businessId
          in: path
          description: ID of business to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  businesses:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int64
                              example: 1
                        - $ref: '#/components/schemas/Business'
                  review:
                    $ref: '#/components/schemas/Reviews'
                  photo:
                    $ref: '#/components/schemas/Photos'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Errors'
        '404':
          description: Not found
    put:
      tags:
        - businesses
      summary: Updates a business
      description: Updates a business by id
      operationId: updateBusinessWithForm
      parameters:
        - name: businessId
          in: path
          description: ID of business that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Business'
        required: true
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Errors'
        '404':
          description: Not found
    patch:
      tags:
        - businesses
      summary: Updates a business
      description: Updates a business by id
      operationId: updateBusiness
      parameters:
        - name: businessId
          in: path
          description: ID of business that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Business'
        required: false
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Errors'
        '404':
          description: Not found
    delete:
      tags:
        - businesses
      summary: Deletes a business
      description: delete a business
      operationId: deleteBusiness
      parameters:
        - name: businessId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successful operation
        '404':
          description: Not found
          
  /reviews:
    post:
      tags:
        - reviews
      summary: Add a new review
      description: Add a new review
      operationId: addReview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reviews'
        required: true
      responses:
        '201':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Errors'
  /reviews/{reviewId}:
    put:
      tags:
        - reviews
      summary: Updates a review
      description: Updates a review by id
      operationId: updateReviewWithForm
      parameters:
        - name: reviewId
          in: path
          description: ID of review that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reviews'
        required: true
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Errors'
        '404':
          description: Not found
    patch:
      tags:
        - reviews
      summary: Updates a review
      description: Updates a review by id
      operationId: updateReview
      parameters:
        - name: reviewId
          in: path
          description: ID of review that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                review:
                  type: string
                  example: So many games
        required: false
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Errors'
        '404':
          description: Not found
    delete:
      tags:
        - reviews
      summary: Deletes a review
      description: Deletes a review by id
      operationId: deleteReview
      parameters:
        - name: reviewId
          in: path
          description: ID of review that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successful operation
        '404':
          description: Not found
        
  /photos:
    post:
      tags:
        - photos
      summary: Create a new photo
      description: Create a new photo
      operationId: createPhoto
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Photos'
        required: true
      responses:
        '201':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Errors'
    
  /photos/{photoId}:
    put:
      tags:
        - photos
      summary: Updates a photo
      description: Updates a photo by id
      operationId: updatephotoWithForm
      parameters:
        - name: photoId
          in: path
          description: ID of photo that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reviews'
        required: true
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Errors'
        '404':
          description: Not found
          
    patch:
      tags:
        - photos
      summary: Updates a photo
      description: Updates a photo by id
      operationId: updatePhoto
      parameters:
        - name: photoId
          in: path
          description: ID of photo that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                review:
                  type: string
                  example: So many games
        required: false
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Errors'
        '404':
          description: Not found
    delete:
      tags:
        - photos
      summary: Deletes a photo
      description: Deletes a photo by id
      operationId: deletePhoto
      parameters:
        - name: photoId
          in: path
          description: ID of photo that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successful operation
        '404':
          description: Not found
  /user/{userid}/businesses:
    get:
      tags:
        - user
      summary: Find All businesses of user
      description: Find All businesses of user by user ID
      operationId: findBusinessByUser
      parameters:
        - name: userid
          in: path
          description: id of user that needs to find businesses
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  photos:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int64
                              example: 1
                        - $ref: '#/components/schemas/Business'
                  page:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 1
                  numPerPage:
                    type: integer
                    example: 10
                  totalCount:
                    type: integer
                    example: 1
        '404':
          description: Not found
  /user/{userid}/reviews:
    get:
      tags:
        - user
      summary: Find All reviews of user
      description: Find All reviews of user by user ID
      operationId: findReviewsByUser
      parameters:
        - name: userid
          in: path
          description: id of user that needs to find businesses
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int64
                              example: 2
                        - $ref: '#/components/schemas/Reviews'
                  page:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 1
                  numPerPage:
                    type: integer
                    example: 10
                  totalCount:
                    type: integer
                    example: 1
        '404':
          description: Not found

  /user/{userid}/photos:
    get:
      tags:
        - user
      summary: Find All photos uploaded by user
      description: Find All photos uploaded by user ID
      operationId: findphotosByUser
      parameters:
        - name: userid
          in: path
          description: id of user that needs to find businesses
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  photos:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int64
                              example: 2
                        - $ref: '#/components/schemas/Photos'
                  page:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 1
                  numPerPage:
                    type: integer
                    example: 10
                  totalCount:
                    type: integer
                    example: 1
        '404':
          description: Not found
      
components:
  schemas:
    Business:
      type: object
      properties:
        ownerId:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Gamagora Geekhouse
        address:
          type: string
          example: 108 SW 3rd St.
        city:
          type: string
          example: Corvallis
        state:
          type: string
          example: OR
        zip:
          type: string
          example: 97333
        phone:
          type: string
          example: 541-286-8616
        category:
          type: string
          example: Shopping
        subcategory:
          type: string
          example: Games
        website:
          type: string
          example: https://gamagorageekhouse.com
        email:
          type: string
          example: example.gmail.com
    Reviews:
      type: object
      properties:
        userid:
          type: integer
          format: int64
          example: 26
        businessid:
          type: integer
          format: int64
          example: 1
        dollars:
          type: integer
          format: int64
          example: 1
        stars:
          type: integer
          format: int64
          example: 5
        review:
          type: string
          example: So many games
    Photos:
      type: object
      properties:
        userid:
          type: integer
          format: int64
          example: 26
        businessid:
          type: integer
          format: int64
          example: 1
        caption:
          type: string
          example: Geekin' out
    Errors:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
        msg:
          type: string
        path:
          type: string
        location:
          type: string
                